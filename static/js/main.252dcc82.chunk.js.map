{"version":3,"sources":["logo.svg","components/video/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","VIDEO_SPEEDS","Video","useState","playVideo","setPlayVideo","toolVisible","setToolVisible","playList","setPlayList","videoRef","useRef","fileChange","e","console","dir","target","file","files","filePath","URL","createObjectURL","concat","url","name","log","renderTools","className","length","map","item","key","onClick","UnorderedListOutlined","style","fontSize","margin","RetweetOutlined","title","placement","overlayClassName","content","speed","current","playbackRate","parseFloat","onSpeedChange","size","disabled","width","ref","src","controls","htmlFor","YoutubeOutlined","type","id","accept","onChange","trigger","visible","onVisibleChange","SettingOutlined","LinkOutlined","Header","Layout","Content","App","height","require","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,mJCWrCC,G,MAAe,CAAC,EAAG,KAAM,IAAK,KAAM,EAAG,MAE9B,SAASC,IAAS,IAAD,EACMC,mBAAS,MADf,mBACrBC,EADqB,KACVC,EADU,OAEUF,oBAAS,GAFnB,mBAErBG,EAFqB,KAERC,EAFQ,OAGIJ,mBAAS,IAHb,mBAGrBK,EAHqB,KAGXC,EAHW,KAItBC,EAAWC,mBAEjB,SAASC,EAAWC,GAChBC,QAAQC,IAAIF,EAAEG,QACd,IAAMC,EAAOJ,EAAEG,OAAOE,MAAM,GACtBC,EAAWC,IAAIC,gBAAgBJ,GACrCZ,EAAac,GACbV,EAAYD,EAASc,OAAO,CACxBC,IAAKJ,EACLK,KAAMP,EAAKO,QAEfV,QAAQW,IAAIN,GAQhB,SAASO,IACL,OACI,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,cAEPnB,EAASoB,OACL,wBAAID,UAAU,cAENnB,EAASqB,KAAI,SAACC,GAAD,OACT,wBACIH,UAAU,OACVI,IAAKD,EAAKP,IACVS,QAAS,kBAAM3B,EAAayB,EAAKP,OACnCO,EAAKN,UAKnB,yBAAKG,UAAU,oBACX,kBAACM,EAAA,EAAD,CAAuBC,MAAO,CAAEC,SAAU,GAAIC,OAAQ,MACtD,iFAKhB,yBAAKT,UAAU,gBACX,kBAACU,EAAA,EAAD,CAAiBV,UAAU,cAC3B,kBAAC,IAAD,CACIW,MAAM,2BACNC,UAAU,WACVC,iBAAiB,eACjBC,QACI,wBAAId,UAAU,eAEN1B,EAAa4B,KAAI,SAACa,GAAD,OACb,wBACIX,IAAKW,EACLf,UAAU,OACVK,QAAS,kBA3CjD,SAAuBU,GACdtC,IACLM,EAASiC,QAAQC,aAAeC,WAAWH,IAyCQI,CAAcJ,KAC/BA,EAJF,UAUhB,kBAAC,IAAD,CAAQK,KAAK,QAAQC,UAAW5C,EAAW8B,MAAO,CAAEe,MAAO,KAA3D,SAmCpB,OA3BY,yBAAKtB,UAAU,WAEfvB,EACI,2BAAOuB,UAAU,eAAeuB,IAAKxC,EAAUyC,IAAK/C,EAAWgD,UAAQ,IAEvE,2BAAOC,QAAQ,OAAO1B,UAAU,kBAC5B,kBAAC2B,EAAA,EAAD,CAAiBpB,MAAO,CAAEC,SAAU,MACpC,wFACA,2BAAOoB,KAAK,OAAOC,GAAG,OAAOC,OAAO,UAAUC,SAAU9C,KAIpE,kBAAC,IAAD,CACI2B,UAAU,cACVC,iBAAiB,cACjBF,MAAM,2BACNG,QAASf,IACTiC,QAAQ,QACRC,QAAStD,EACTuD,gBAAiBtD,GAEjB,kBAACuD,EAAA,EAAD,CAAiBnC,UAAU,mBAE/B,kBAACoC,EAAA,EAAD,CAAcpC,UAAU,mB,aC1G5BqC,G,OAAoBC,IAApBD,QAAQE,EAAYD,IAAZC,QAgBDC,MAdf,WACE,OACE,kBAAC,IAAD,CAAQjC,MAAO,CAAEkC,OAAQ,UACvB,kBAACJ,EAAD,KACE,yBAAKrC,UAAU,WAAWwB,IAAKkB,EAAQ,KAAeC,IAAI,SAC1D,wBAAI3C,UAAU,aAAd,iBAEF,kBAACuC,EAAD,KACE,kBAAChE,EAAD,SCJYqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzE,QAAQyE,MAAMA,EAAMC,a","file":"static/js/main.252dcc82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from 'react';\nimport {\n    YoutubeOutlined,\n    SettingOutlined,\n    RetweetOutlined,\n    UnorderedListOutlined,\n    LinkOutlined,\n} from '@ant-design/icons';\nimport { Popover, Button } from 'antd';\nimport './style.less';\n\nconst VIDEO_SPEEDS = [2, 1.75, 1.5, 1.25, 1, 0.75];\n\nexport default function Video() {\n    const [playVideo, setPlayVideo] = useState(null);\n    const [toolVisible, setToolVisible] = useState(false);\n    const [playList, setPlayList] = useState([]);\n    const videoRef = useRef();\n\n    function fileChange(e) {\n        console.dir(e.target)\n        const file = e.target.files[0];\n        const filePath = URL.createObjectURL(file);\n        setPlayVideo(filePath);\n        setPlayList(playList.concat({\n            url: filePath,\n            name: file.name,\n        }));\n        console.log(filePath);\n    }\n\n    function onSpeedChange(speed) {\n        if (!playVideo) return;\n        videoRef.current.playbackRate = parseFloat(speed);\n    }\n\n    function renderTools() {\n        return (\n            <div className=\"o-video__ctrs-tools\">\n                <div className=\"tools-body\">\n                    {\n                        playList.length ? (\n                            <ul className=\"tools-list\">\n                                {\n                                    playList.map((item) => (\n                                        <li\n                                            className=\"item\"\n                                            key={item.url}\n                                            onClick={() => setPlayVideo(item.url)}\n                                        >{item.name}</li>\n                                    ))\n                                }\n                            </ul>\n                        ) : (\n                            <div className=\"tools-list-empty\">\n                                <UnorderedListOutlined style={{ fontSize: 26, margin: 12 }} />\n                                <p>当前播放列表为空</p>\n                            </div>\n                        )\n                    }\n                </div>\n                <div className=\"tools-footer\">\n                    <RetweetOutlined className=\"icon-loop\" />\n                    <Popover\n                        title=\"倍速播放\"\n                        placement=\"topRight\"\n                        overlayClassName=\"speeds-popup\"\n                        content={(\n                            <ul className=\"speeds-list\">\n                                {\n                                    VIDEO_SPEEDS.map((speed) => (\n                                        <li\n                                            key={speed}\n                                            className=\"item\"\n                                            onClick={() => onSpeedChange(speed)}\n                                        >{speed}x</li>\n                                    ))\n                                }\n                            </ul>\n                        )}\n                    >\n                        <Button size=\"small\" disabled={!playVideo} style={{ width: 60 }}>1x</Button>\n                    </Popover>\n                </div>\n            </div>\n        )\n    }\n\n    function render() {\n        return (<div className=\"o-video\">\n            {\n                playVideo ? (\n                    <video className=\"o-video__tag\" ref={videoRef} src={playVideo} controls></video>\n                ) : (\n                    <label htmlFor=\"file\" className=\"o-video__empty\">\n                        <YoutubeOutlined style={{ fontSize: 80 }} />\n                        <span>点击或拖拽视频文件</span>\n                        <input type=\"file\" id=\"file\" accept=\"video/*\" onChange={fileChange} />\n                    </label>\n                )\n            }\n            <Popover\n                placement=\"bottomRight\"\n                overlayClassName=\"tools-popup\"\n                title=\"播放列表\"\n                content={renderTools()}\n                trigger=\"click\"\n                visible={toolVisible}\n                onVisibleChange={setToolVisible}\n            >\n                <SettingOutlined className=\"o-video__ctrs\"/>\n            </Popover>\n            <LinkOutlined className=\"o-video__link\" />\n        </div>)\n    }\n\n    return render();\n}\n","import React from 'react';\nimport Video from './components/video';\nimport { Layout } from 'antd';\n\nimport './App.less';\n\nconst { Header, Content } = Layout;\n\nfunction App() {\n  return (\n    <Layout style={{ height: '100vh' }}>\n      <Header>\n        <img className=\"App-logo\" src={require('./logo.svg')} alt=\"logo\"/>\n        <h1 className=\"App-title\">Online Video</h1>\n      </Header>\n      <Content>\n        <Video />\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}